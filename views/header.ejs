<!DOCTYPE html>
<html lang="en">

<head>
  <%-include("head_tags")%>
    <title>ComicRoom</title>
</head>

<body class="h-100 text-center text-white bg-dark">
  <!-- begin header -->
  <header style="background-color: #212121;border-bottom: 2px solid #353535;" class="p-3 text-white">
    <div class="container">
      <div class="d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start mx-5">
        <ul class=" nav col-12 col-lg-auto me-lg-auto mb-2 justify-content-center mb-md-0">
          <li><a href="/comic" class="nav-link px-2 text-secondary"><i class="fas fa-globe"></i> Gallery</a></li>
          <% if(typeof userData !='undefined' ){%>
            <li><a href="/onread" class="nav-link px-2 text-secondary"><i class="fas fa-history"></i> Reading</a></li>
            <li class="nav-link px-2 text-secondary position-relative">
              <div id="uploadNotification" class="position-relative" style="display: none;">
                <i class="fas fa-bell" style="font-size: 18px; cursor: pointer;"
                  onclick="toggleNotificationDropdown()"></i>
                <span id="notificationBadge"
                  class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                  style="font-size: 10px; display: none;">
                  0
                </span>
                <div id="notificationDropdown" class="position-absolute bg-dark border rounded p-2"
                  style="display: none; top: 30px; right: -50px; min-width: 250px; z-index: 1000; box-shadow: 0 4px 8px rgba(0,0,0,0.3);">
                  <div class="text-start">
                    <h6 class="text-white mb-2">Upload Notifications</h6>
                    <div id="notificationList"></div>
                    <div class="mt-2">
                      <button class="btn btn-sm btn-outline-light" onclick="clearNotifications()">Clear All</button>
                    </div>
                  </div>
                </div>
              </div>
            </li>
            <% } %>
              <li style="cursor: pointer;<% if(typeof searchKeywords !== 'undefined' && searchKeywords !== '' ){%>display:
                none;<%}%>" id="searchButton" class="nav-link px-2 text-secondary"><i class="fas fa-search"></i> Search
              </li>
              <li>

                <div id="formSearch" style="margin-top: 2px;<% if(typeof searchKeywords === 'undefined' ||
                  searchKeywords === '' ){%>display: none; <%}%>" class="form-group has-feedback">
                    <form id="searchOption" class="input-group" method="GET" action="/comic">
                      <span onclick="document.getElementById('submit_search').click();" class="input-group-addon"
                        style="border:1px solid white;background-color:  #212529;border-radius: 7px 0 0 7px;padding-top: 2px;"><span
                          style="font-size: 27px;padding:4px;color: #636464;" class="fas fa-search"></span></span>
                      <input name="keyword" id="searchInput" value="<% if(typeof searchKeywords !== 'undefined'){%><%=searchKeywords%><%}%>" type="text" class="form-control" placeholder="Search..." style="border-left: 0px;
                          color:white; background-color: #212529;">
                          <!-- To use Enter from KeyBoard -->
                          <button id="submit_search" style="display: none;">Hidden Button for Search</button>
                    </form>
                    <script>
                      spliter = window.location.pathname.split(/\//);
                      document.getElementById('searchOption').setAttribute("action", spliter[spliter.length - 1]);
                    </script>
                </div>
              </li>
        </ul>
        <% if(typeof userData=='undefined' ){%>
          <div class="text-end">
            <a class="text-white me-2" href="/login">
              <i aria-hidden="true" class="pt-1 fas fa-sign-in-alt"></i> Login
            </a>
            <a href="/register">
              <button type="button" class="btn btn-warning"><i class="pt-1 fas fa-user-plus"></i> Sign-up</button>
            </a>
          </div>
          <% }else{ %>
            <div class="text-end">
              <a href="/comic/upload" style="text-decoration: none;color: wheat;">
                <button type="button" class="btn btn-outline-light me-2">

                  <i class="fas fa-file-upload"></i> UPLOAD

                </button>
                <a href="/logout" style="color: #525252;"> Logout </a>
              </a>
            </div>
            <% } %>
      </div>
    </div>
  </header>
  <!-- end header -->

  <script>
    // Upload notification system
    let completedNotifications = JSON.parse(localStorage.getItem('completedNotifications') || '[]');
    let lastKnownJobs = new Set();

    function addCompletedNotification(jobId, fileName, comicId, comicFolderId, success = true, errorMessage = null) {
      const notification = {
        id: Date.now(),
        jobId,
        fileName,
        comicId,
        comicFolderId,
        success,
        errorMessage,
        timestamp: new Date().toISOString(),
        viewed: false
      };

      completedNotifications.unshift(notification); // Add to beginning
      if (completedNotifications.length > 10) {
        completedNotifications = completedNotifications.slice(0, 10); // Keep only last 10
      }

      localStorage.setItem('completedNotifications', JSON.stringify(completedNotifications));
      updateNotificationUI();
    }

    function toggleNotificationDropdown() {
      const dropdown = document.getElementById('notificationDropdown');
      dropdown.style.display = dropdown.style.display === 'none' ? 'block' : 'none';

      // Mark all as viewed
      completedNotifications.forEach(n => n.viewed = true);
      localStorage.setItem('completedNotifications', JSON.stringify(completedNotifications));
      updateNotificationUI();
    }

    function clearNotifications() {
      completedNotifications = [];
      localStorage.setItem('completedNotifications', JSON.stringify(completedNotifications));
      updateNotificationUI();
      document.getElementById('notificationDropdown').style.display = 'none';
    }

    function updateNotificationUI() {
      const notificationArea = document.getElementById('uploadNotification');
      const badge = document.getElementById('notificationBadge');
      const list = document.getElementById('notificationList');

      console.log('Updating notification UI, notifications:', completedNotifications.length);

      if (!notificationArea) {
        console.log('Notification area not found - user not logged in');
        return; // Not logged in
      }

      const unviewed = completedNotifications.filter(n => !n.viewed).length;
      console.log('Unviewed notifications:', unviewed);

      if (completedNotifications.length > 0) {
        console.log('Showing notification area');
        notificationArea.style.display = 'block';

        if (unviewed > 0) {
          badge.style.display = 'block';
          badge.textContent = unviewed;
          console.log('Showing badge with count:', unviewed);
        } else {
          badge.style.display = 'none';
          console.log('Hiding badge - all notifications viewed');
        }

        // Update notification list
        list.innerHTML = '';
        completedNotifications.forEach(notification => {
          const item = document.createElement('div');
          item.className = 'mb-2 p-2 rounded ' + (notification.viewed ? 'bg-secondary' : 'bg-primary');
          item.style.fontSize = '12px';

          if (notification.success) {
            item.innerHTML = `
             <div class="text-success"><i class="fas fa-check-circle"></i> Upload Complete</div>
             <div class="text-truncate">${notification.fileName}</div>
             <div class="mt-1">
               <a href="/comic/${notification.comicFolderId}/${notification.comicId}" class="btn btn-xs btn-outline-light" style="font-size: 10px;">View Comic</a>
             </div>
             <div class="text-muted" style="font-size: 10px;">${new Date(notification.timestamp).toLocaleString()}</div>
           `;
          } else {
            item.innerHTML = `
             <div class="text-danger"><i class="fas fa-exclamation-circle"></i> Upload Failed</div>
             <div class="text-truncate">${notification.fileName}</div>
             <div class="text-danger" style="font-size: 10px;">${notification.errorMessage || 'Unknown error'}</div>
             <div class="text-muted" style="font-size: 10px;">${new Date(notification.timestamp).toLocaleString()}</div>
           `;
          }

          list.appendChild(item);
        });
      } else {
        console.log('No notifications - hiding notification area');
        notificationArea.style.display = 'none';
      }
    }

    async function checkActiveJobs() {
      try {
        const response = await fetch('/ajax/upload/active');
        if (!response.ok) return;

        const data = await response.json();
        const currentJobs = new Set(data.jobs.map(job => job.jobId));

        // Check for completed jobs (jobs that were active but are no longer in the list)
        for (const jobId of lastKnownJobs) {
          if (!currentJobs.has(jobId)) {
            // Job completed, check its final status
            try {
              const statusResponse = await fetch(`/ajax/upload/status/${jobId}`);
              if (statusResponse.ok) {
                const statusData = await statusResponse.json();
                const job = data.jobs.find(j => j.jobId === jobId) || { fileName: 'Unknown file' };

                if (statusData.status === 'completed') {
                  addCompletedNotification(
                    jobId,
                    job.fileName,
                    statusData.comicId,
                    statusData.comicFolderId,
                    true
                  );
                } else if (statusData.status === 'failed') {
                  addCompletedNotification(
                    jobId,
                    job.fileName,
                    null,
                    null,
                    false,
                    statusData.errorMessage
                  );
                }
              }
            } catch (error) {
              console.error('Error checking completed job status:', error);
            }
          }
        }

        // Update known jobs
        lastKnownJobs = currentJobs;

        console.log('Active jobs:', data.jobs.length);
      } catch (error) {
        console.error('Error checking active jobs:', error);
      }
    }

    // Close dropdown when clicking outside
    document.addEventListener('click', function (event) {
      const dropdown = document.getElementById('notificationDropdown');
      const notification = document.getElementById('uploadNotification');

      if (dropdown && notification && !notification.contains(event.target)) {
        dropdown.style.display = 'none';
      }
    });

    // Test function to manually add a notification (for debugging)
    function testNotification() {
      addCompletedNotification('test123', 'Test Comic.cbz', 1, 'comic_123', true);
      console.log('Test notification added');
    }

   // Initialize notification UI and start periodic checking
   <% if (typeof userData != 'undefined') {%>
      document.addEventListener('DOMContentLoaded', function () {
        console.log('Initializing notification system...');
        updateNotificationUI();

        // Get initial active jobs
        checkActiveJobs();

        // Check active jobs every 15 seconds
        setInterval(checkActiveJobs, 15000);

        // Make test function globally available for debugging
        window.testNotification = testNotification;
        console.log('Notification system initialized. Try: testNotification() in console');
      });
   <% } %>
  </script>